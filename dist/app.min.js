MathJax.Hub.Config({
	tex2jax: {
	  inlineMath: [['$','$'], ['\\(','\\)']],
	  processEscapes: true
	}
});

var SearchApp =
  angular.module('TopicModelSearchApp', ['ngRoute', 'ui.slider'])
  .config(function($interpolateProvider) {
      $interpolateProvider.startSymbol('{[');
      $interpolateProvider.endSymbol(']}');
  })
  .config(function($routeProvider){
    $routeProvider.when('/', {
      controller: 'SearchController',
      templateUrl: 'src/app/views/search.html'
    })
  });

SearchApp.service('API', function($http){
  this.search = function(options){
    return $http.get('api/search', {
      params: { keywords: options.keywords, topic_count: options.topicCount, keyword_count: options.keywordCount }
    });
  }

  this.next = function(options){
    return $http.post('api/next', options.selections);
  }
});

SearchApp.controller('SearchController', function(API, $scope){
  var keywordSelectionHistory = {};
  var iterationSelections = [];

  $scope.showSearchInput = true;
  $scope.settings = {
    topicCount: 10,
    keywordCount: 10
  };

  $scope.toggleShowSettings = function(){
      $scope.showSettings = !$scope.showSettings;
  }

  $scope.newQuery = function(){
    $scope.isSearching = false;
    $scope.showSearchInput = true;
    $scope.showOptionButtons = false;
    $scope.queryKeywords = '';
    $scope.searchKeywords = '';

    window.scrollTo(0,0);
  }

  $scope.nextIterationIsDisabled = function(){
    if($scope.isLoading){
      return true;
    }

    var selectedArticles = _.chain($scope.topics)
      .reduce(function(all, topic){
        return all.concat(topic.articles);
      }, [])
      .where({ selected: true })
      .value();

    var selectedKeywords = _.chain($scope.topics)
      .reduce(function(all, topic){
        return all.concat(topic.keywords);
      }, [])
      .where({ selected: true })
      .value();

    return ( selectedArticles.length + selectedKeywords.length ) == 0;
  }

  $scope.nextIteration = function(){
    window.scrollTo(0, 0);

    $scope.isLoading = true;

    console.log(iterationSelections);

    var selectionIds = _.map(iterationSelections, function(selection){ return selection.id });

    API.next({ selections: selectionIds }).then(function(results){
      rawTopics = results.data;
      $scope.topics = [];

      for(topicName in rawTopics){
        rawTopics[topicName].keywords.forEach(function(keyword){
          if(keywordSelectionHistory[keyword.label]){
            keyword.selected = true;
          }
        });

        $scope.topics.push({
          topic: topicName,
          keywords: rawTopics[topicName].keywords,
          articles: rawTopics[topicName].articles
        })
      }

      $scope.isLoading = false;
    });
  }

  $scope.abstractKeywordClicked = function(keyword, topicName){
    var targetTopic = _.find($scope.topics, function(topic){
      return topic.topic == topicName
    });

    var targetKeyword = _.find(targetTopic.keywords, function(k){
      return k.label == keyword;
    });

    $scope.toggleKeyword(targetKeyword);

    return targetKeyword;
  }

  $scope.search = function(){
    $scope.searchKeywords = $scope.queryKeywords;
    $scope.showOptionButtons = true;
    $scope.showSearchInput = false;
    $scope.isSearching = true;
    $scope.isLoading = true;

    API.search({ keywords: $scope.queryKeywords, topicCount: $scope.settings.topicCount, keywordCount: $scope.settings.keywordCount }).then(function(results){
      rawTopics = results.data;
      $scope.topics = [];

      for(topicName in rawTopics){
        $scope.topics.push({
          topic: topicName,
          keywords: rawTopics[topicName].keywords,
          articles: rawTopics[topicName].articles
        })
      }

      $scope.isLoading = false;
    });
  }

  $scope.toggleKeyword = function(keyword){
    keyword.selected = !keyword.selected;

    if(keyword.selected){
      keywordSelectionHistory[keyword.label] = true;
      iterationSelections.push(keyword);
    }else{
      delete keywordSelectionHistory[keyword.label]
      _.remove(iterationSelections, function(selection){ return selection.id == keyword.id });
    }
  }

  $scope.toggleArticle = function(article){
    article.selected = !article.selected;

    if(article.selected){
      iterationSelections.push(article);
    }else{
      _.remove(iterationSelections, function(selection){ return selection.id == article.id });
    }
  }
});

SearchApp.directive('backToTop', function(){
  return {
    template: '<i class="fa fa-chevron-up"></i> Back to top',
    link: function(scope, elem, attrs){
      $(elem).on('click', function(){
        window.scrollTo(0,0);
      });

      $(elem).addClass('back-to-top-btn');

      $(window).on('scroll', function(){
        var topScroll = $(window).scrollTop();

        if(topScroll > 400){
          $(elem).addClass('bring-up');
        }else{
          $(elem).removeClass('bring-up');
        }
      });
    }
  }
});

SearchApp.directive('keywordAbstract', function() {
  return {
    scope: {
      abstract: '=',
      keywords: '=',
      keywordOnClick: '=',
      topicName: '='
    },
    link: function(scope, elem, attrs){
      var highlight = function(abstract, keywords){
        var abstractWords = abstract.split(' ');

        abstractWords.forEach(function(word, index){
          keywords.forEach(function(keyword){
            var keywordIndex = word.toLowerCase().indexOf(keyword.label.toLowerCase());

            if(keywordIndex >= 0){
              var wordStart = word.substring(0, keywordIndex);
              var wordEnd = word.substring(keywordIndex + keyword.label.length, word.length);
              var selectedClass = keyword.selected ? ' active' : '';
              var highlighted = wordStart + '<span class="highlight' + selectedClass + '">' + keyword.label + '</span>' + wordEnd;

              abstractWords[index] = highlighted;
              return;
            }
          });
        });

        return abstractWords.join(' ')
      }

      scope.$watch('abstract', function(texExpression) {
        elem.html(highlight(texExpression, scope.keywords));

        $(elem).find('.highlight').on('click', function(){
          var $targetKeyword = $(this);

          scope.$apply(function(){
            keyword = scope.keywordOnClick($targetKeyword.text(), scope.topicName);

            if(keyword.selected){
              $targetKeyword.addClass('active')
            }else{
              $targetKeyword.removeClass('active');
            }
          });
        });

        MathJax.Hub.Queue(['Typeset', MathJax.Hub, elem[0]]);
      });

      scope.$watch('keywords', function(keywords){
        var selected = _.where(keywords, { selected: true });

        $(elem).find('.highlight').each(function(){
          var keywordText = $(this).text();

          var matchingKeywords = _.find(selected, { label: keywordText });

          if(matchingKeywords){
            $(this).addClass('active');
          }else{
            $(this).removeClass('active');
          }
        });
      }, true);
    }
  }
});
